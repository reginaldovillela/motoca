// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motoca.Infrastructure.Riders;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Motoca.Infrastructure.Migrations.Riders
{
    [DbContext(typeof(RidersContext))]
    [Migration("20241029011629_riders")]
    partial class riders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Motoca.Domain.Riders.AggregatesModel.DriversLicenseEntity", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("InternalId");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<Guid>("RiderEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("RiderEntityId")
                        .IsUnique();

                    b.ToTable("riders_drivers_licenses");
                });

            modelBuilder.Entity("Motoca.Domain.Riders.AggregatesModel.RiderEntity", b =>
                {
                    b.Property<Guid>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("InternalId");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("EntityId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("riders");
                });

            modelBuilder.Entity("Motoca.Domain.Riders.AggregatesModel.DriversLicenseEntity", b =>
                {
                    b.HasOne("Motoca.Domain.Riders.AggregatesModel.RiderEntity", "Rider")
                        .WithOne("DriversLicense")
                        .HasForeignKey("Motoca.Domain.Riders.AggregatesModel.DriversLicenseEntity", "RiderEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("Motoca.Domain.Riders.AggregatesModel.RiderEntity", b =>
                {
                    b.OwnsOne("Motoca.Domain.Riders.AggregatesModel.SocialIdVO", "SocialId", b1 =>
                        {
                            b1.Property<Guid>("RiderEntityEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("SocialId");

                            b1.HasKey("RiderEntityEntityId");

                            b1.HasIndex("Number")
                                .IsUnique();

                            b1.ToTable("riders");

                            b1.WithOwner()
                                .HasForeignKey("RiderEntityEntityId");
                        });

                    b.Navigation("SocialId")
                        .IsRequired();
                });

            modelBuilder.Entity("Motoca.Domain.Riders.AggregatesModel.RiderEntity", b =>
                {
                    b.Navigation("DriversLicense")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
